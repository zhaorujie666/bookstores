<?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xzsd.pc.goods.dao.GoodsDao">
    <!--统计是否出现重复的书号个数-->
    <select id="countBookNumber" parameterType="com.xzsd.pc.goods.entity.GoodsInfo" resultType="int">
        select count(book_number)
        from t_goods_info
        where book_number = #{isbn}
        <if test="goodsId != null and goodsId != ''">
            and id != #{goodsId}
        </if>
        and is_delete = 0
    </select>

    <!--新增商品-->
    <insert id="addGoods" parameterType="com.xzsd.pc.goods.entity.GoodsInfo">
        insert into t_goods_info(
            id,
            goods_name,
            store_id,
            store_name,
            author,
            publisher,
            book_number,
            goods_image,
            old_price,
            selling_price,
            sales,
            stock,
            goods_introduction,
            advertisement,
            category_first,
            category_second,
            goods_status,
            view_num,
            start_time,
            star_level,
            is_delete,
            create_time,
            create_user,
            update_time,
            version
        )
        values(
            #{goodsId},
            #{goodsName},
            #{storeId},
            #{supplierName},
            #{goodsAuthor},
            #{goodsPress},
            #{isbn},
            #{imagePath},
            #{goodsOriginalCost},
            #{goodsPrice},
            0,
            #{goodsInventory},
            #{goodsDescribe},
            #{goodsAdvertise},
            #{oneClassifyId},
            #{twoClassifyId},
            3,
            0,
            now(),
            0,
            0,
            now(),
            #{createUser},
            now(),
            0
        )
    </insert>

    <!--查询商品详情-->
    <select id="getGoodsInfoById" parameterType="java.lang.String" resultType="com.xzsd.pc.goods.entity.GoodsDetails">
        select
        t1.id as goodsId,
        t1.goods_name as goodsName,
        t1.book_number as isbn,
        t1.advertisement as goodsAdvertise,
        t1.goods_introduction as goodsDescribe,
        t2.category_name as oneClassifyName,
        t3.category_name as twoClassifyName,
        t1.category_first as oneClassifyId,
        t1.category_second as twoClassifyId,
        t1.store_name as supplierName,
        t1.stock as goodsInventory,
        t1.old_price as goodsOriginalCost,
        t1.selling_price as goodsPrice,
        t1.publisher as goodsPress,
        t1.author as goodsAuthor,
        t1.goods_image as goodsImagePath,
        t1.version as version
        from t_goods_info t1, t_goods_category t2, t_goods_category t3
        where t1.id = #{goodsId}
        and t2.id = t1.category_first
        and t3.id = t1.category_second
    </select>

    <!--查询商品一二级分类列表-->
    <select id="getListGoodsCategory" parameterType="java.lang.String"
            resultType="com.xzsd.pc.category.entity.GoodsCategoryVO">
        select
        id classifyId,
        category_name classifyName,
        rank as rank
        from t_goods_category
        where parent_id = #{classifyId}
        and is_delete = 0
    </select>

    <!--修改商品的信息-->
    <update id="updateGoodsInfo" parameterType="com.xzsd.pc.goods.entity.GoodsInfo">
        update t_goods_info
        set
            goods_name = #{goodsName},
            book_number = #{isbn},
            category_first = #{oneClassifyId},
            category_second = #{twoClassifyId},
            advertisement = #{goodsAdvertise},
            goods_introduction = #{goodsDescribe},
            store_name = #{supplierName},
            stock = #{goodsInventory},
            old_price = #{goodsOriginalCost},
            selling_price = #{goodsPrice},
            publisher = #{goodsPress},
            author = #{goodsAuthor},
            <if test="imagePath != null and imagePath != ''">
                goods_image = #{imagePath},
            </if>
            <if test="goodsInventory == 0">
                goods_status = 0,
            </if>
            <if test="goodsInventory != 0">
                goods_status = 1,
            </if>
            update_user = #{updateUser},
            update_time = now(),
            version = version + 1
            where id = #{goodsId}
            and version = #{version}
    </update>

    <!--查询商品列表（分页）-->
    <select id="getListGoods" parameterType="com.xzsd.pc.goods.entity.GoodsInfo"
            resultType="com.xzsd.pc.goods.entity.GoodsVO">
        select
        t1.id as goodsId,
        t1.goods_name as goodsName,
        t1.old_price as goodsOriginalCost,
        t1.selling_price as goodsPrice,
        t1.sales as goodsSales,
        t2.category_name as oneClassifyName,
        t3.category_name as twoClassifyName,
        t1.advertisement as goodsAdvertise,
        t1.goods_introduction as goodsDescribe,
        t1.goods_status as goodsStateId,
        t1.start_time as goodsShelfTime,
        t1.view_num as goodsViewsNum,
        t1.store_name as supplierName,
        t1.stock as goodsInventory,
        t1.book_number as isbn,
        t1.store_id as storeId,
        t1.goods_image as goodsImagePath,
        t1.publisher as goodsPress,
        t1.author as goodsAuthor,
        t1.version as version
        from t_goods_info t1, t_goods_category t2, t_goods_category t3
        where t1.is_delete = 0
        and t2.id = t1.category_first
        and t3.id = t1.category_second
        <if test="goodsName != null and goodsName != null">
            and t1.goods_name like concat('%', #{goodsName}, '%')
        </if>
        <if test="goodsStateId != null and goodsStateId != ''">
            and t1.goods_status = #{goodsStateId}
        </if>
        <if test="goodsAdvertise != null and goodsAdvertise != ''">
            and t1.advertisement like concat('%', #{goodsAdvertise}, '%')
        </if>
        <if test="goodsPress != null and goodsPress != ''">
            and t1.publisher like concat('%', #{goodsPress}, '%')
        </if>
        <if test="goodsAuthor != null and goodsAuthor != ''">
            and t1.author like concat('%', #{goodsAuthor}, '%')
        </if>
        order by t1.create_time desc
    </select>

    <!--修改商品状态-->
    <update id="updateGoodsStatus" parameterType="java.util.List">
        <foreach item="item" index="index" collection="goodsInfoList" open="" separator=";" close="">
            update t_goods_info
            set
            goods_status = #{item.goodsStateId},
            update_time = now(),
            <if test="item.goodsStateId == 1">
                start_time = now(),
            </if>
            update_user = #{item.updateUser, jdbcType=VARCHAR},
            version = version + 1
            <where>
                id = #{item.goodsId, jdbcType=VARCHAR}
                and version = #{item.version, jdbcType=VARCHAR}
            </where>
        </foreach>
    </update>

    <!--删除商品-->
    <update id="deleteGoods" parameterType="java.lang.String">
        update t_goods_info
        set
            is_delete = 1,
            update_user = #{loginId},
            update_time = now(),
            version = version + 1
        where id in
        <foreach item="goodsId" index="index" collection="listGoodsId" open="(" separator="," close=")">
            #{goodsId}
        </foreach>
    </update>

    <!--查询删除的商品是否已经被轮播图或热门商品使用-->
    <select id="querySlideAndHotGoods" parameterType="java.lang.String" resultType="java.lang.String">
        select
        distinct
        t1.id as goodsId
        from t_goods_info t1, t_sys_slide t2, t_hot_goods t3
        where (t1.id = t2.goods_id or t1.id = t3.goods_id)
        and t1.is_delete = 0
        and t2.is_delete = 0
        and t3.is_delete = 0
        and t1.id in
        <foreach item="goodsId" index="index" collection="listGoodsId" open="(" separator="," close=")">
            #{goodsId}
        </foreach>
    </select>
</mapper>
